/* main.js
 *
 * Copyright 2024 Justin Donnelly
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * SPDX-License-Identifier: MPL-2.0
 */

import Adw from 'gi://Adw?version=1';
import Gio from 'gi://Gio'; // Required by GJS, version not necessary.
import GLib from 'gi://GLib'; // Required by GJS, version not necessary.
import GLibUnix from 'gi://GLibUnix?version=2.0';
import GObject from 'gi://GObject'; // Required by GJS, version not necessary.
import Gtk from 'gi://Gtk';

import { ChooseZoneWindow } from './chooseZoneWindow.js';
import { ConnectionIdsSeen } from './connectionIdsSeen.js';
import { DependencyCheck } from './dependencyCheck.js';
import { NetworkState } from './networkState.js';
import { ZoneForConnection } from './zoneForConnection.js';
import { ZoneInfo } from './zoneInfo.js';

import promisify from './promisify.js';

pkg.initGettext();
// The line below was generated by GNOME Builder with the template. But eslint doesn't seem to like it. For now, we'll
// ignore it.
// eslint-disable-next-line no-restricted-properties
pkg.initFormat();

export const BouncerApplication = GObject.registerClass(
    class BouncerApplication extends Adw.Application {
        #sourceIds = [];
        #connectionIdsSeen;
        #quitting = false;

        constructor() {
            super({
                application_id: 'io.github.justinrdonnelly.bouncer',
                flags: Gio.ApplicationFlags.DEFAULT_FLAGS,
            });

            console.log('Welcome to Bouncer! Starting up.');
            promisify();
            this.#connectionIdsSeen = new ConnectionIdsSeen();

            // about action
            this._showAboutAction = new Gio.SimpleAction({ name: 'about' });
            // eslint-disable-next-line no-unused-vars
            this._showAboutAction.connect('activate', (action) => {
                const aboutParams = {
                    // main page
                    application_name: 'Bouncer',
                    application_icon: 'io.github.justinrdonnelly.bouncer',
                    developer_name: 'Justin Donnelly',
                    version: '48.1.0',
                    // details
                    comments: _('Bouncer is an application to help you choose the correct firewall zone for wireless ' +
                        'connections. When you connect to a new network, Bouncer will open a window prompting you ' +
                        'for what kind of network (eg home, public, work) it is. When you choose the network type, ' +
                        'it is associated with that network and automatically used in the future.'),
                    website: 'https://github.com/justinrdonnelly/bouncer',
                    // troubleshooting
                    issue_url: 'https://github.com/justinrdonnelly/bouncer/issues',
                    // credits
                    developers: ['Justin Donnelly'],
                    // legal
                    copyright: 'Â© 2024 Justin Donnelly',
                    license_type: Gtk.License.MPL_2_0,
                };
                const aboutDialog = new Adw.AboutDialog(aboutParams);
                aboutDialog.present(this.active_window);
            });
            this.add_action(this._showAboutAction);

            // handle signals
            const signals = [2, 15];
            signals.forEach((signal) => {
                const gsourceSignal = GLibUnix.signal_source_new(signal);
                gsourceSignal.set_callback(() => {
                    this.quit(signal);
                });
                this.#sourceIds.push(gsourceSignal.attach(null));
            });

            // fire and forget
            this.#init()
              .catch(e => {
                console.error('Unhandled error in main init. This is a bug!');
                console.error(e);
              });
        } // end constructor

        // The init method will instantiate NetworkState and listen for its signals. We do this outside the constructor
        // so we can be async.
        async #init() {
            try {
                const dependencyCheck = new DependencyCheck();
                dependencyCheck.connect('error', this.#handleErrorSignal.bind(this));
                dependencyCheck.connect('first-run-setup-complete', this.#handleFirstRunSignal.bind(this));
                await dependencyCheck.runChecks();
            } catch (e) {
                // This should really never happen. DependencyCheck is full of `try/catch`es, so exceptions shouldn't
                // get this far. Since we don't know how this happened, we'll log it, continue, and hope for the best.
                console.error('Error in dependency check.');
                console.error(e.message);
                this.#handleError(
                    false,
                    'main-dependency-unknown-error',
                    _('Unknown error'),
                    _('An unknown error occurred. Bouncer may not function correctly. Please see logs for more ' +
                        'information.')
                );
            }
            try {
                await this.#connectionIdsSeen.init();
            } catch (e) {
                // Bail out here... There's nothing we can reasonably do without knowing if a network has been seen.
                console.error('Unable to initialize ConnectionIdsSeen.');
                console.error(e.message);
                this.#handleError(
                    true,
                    'main-connection-ids',
                    _('Can\'t find previously seen connections'),
                    _('There was a problem determining which connections have already been seen. Please see logs for ' +
                        'more information.')
                );
            }

            try {
                this.networkState = new NetworkState();
                this.networkState.connect('error', this.#handleErrorSignal.bind(this));
                this.networkState.connect('connection-changed', this.#handleConnectionChangedSignal.bind(this));
            } catch (e) {
                // Bail out here... There's nothing we can do without NetworkState.
                console.error('Unable to initialize NetworkState.');
                console.error(e.message);
                this.#handleError(
                    true,
                    'main-network-state',
                    _('Can\'t determine network state'),
                    _('There was a problem tracking network connection changes. Please see logs for more information.')
                );
            }
        } // end init

        vfunc_activate() {} // Required because Adw.Application extends GApplication.

        // eslint-disable-next-line no-unused-vars
        #handleErrorSignal(emittingObject, fatal, id, title, message) {
            this.#handleError(fatal, id, title, message);
        }

        #handleError(fatal, id, title, message) {
            if (fatal)
                message += _(' Bouncer is shutting down. You will need to restart manually.');
            const notification = new Gio.Notification();
            notification.set_title(title);
            notification.set_body(message);
            this.send_notification(id, notification);
            if (fatal) {
                this.quit(null);
            }
        }

        // eslint-disable-next-line no-unused-vars
        #handleFirstRunSignal(emittingObject) {
            const notification = new Gio.Notification();
            notification.set_title(_('First run setup complete!'));
            const message = _('Your system is correctly configured for Bouncer. Bouncer will autostart on each login ' +
                'and will open when you connect to a new Wi-Fi network.');
            notification.set_body(message);
            console.log('about to send notification');
            this.send_notification('first-run-setup-complete', notification);
        }

        // eslint-disable-next-line no-unused-vars
        async #handleConnectionChangedSignal(emittingObject, connectionId, activeConnectionSettings) {
            try {
                this.#closeWindowIfConnectionChanged(connectionId);
                // bail out if there is no connection
                if (connectionId === '')
                    return;

                const isConnectionNew = this.#connectionIdsSeen.isConnectionNew(connectionId);
                if (!isConnectionNew)
                    // The connection is not new. Don't open the window.
                    return;

                const [zones, defaultZone, currentZone] = await Promise.all([
                    ZoneInfo.getZones(),
                    ZoneInfo.getDefaultZone(),
                    ZoneForConnection.getZone(activeConnectionSettings),
                ]);
                this.#createWindow(connectionId, defaultZone, currentZone, zones, activeConnectionSettings);
            } catch (e) {
                // We've hit an exception in the callback where we'd consider opening the window. Bail out and
                // hope for better luck next time (unlikely).
                console.error('Error while trying to prompt. This is likely related to getting zone ' +
                    'information.');
                console.error(e.message);
                this.#handleError(
                    false,
                    'main-network-state-emit',
                    _('Can\'t prompt for firewall zone'),
                    _('There was a problem getting information to prompt for the firewall zone. Please see logs for ' +
                        'more information.')
                );
            }
        }

        #createWindow(connectionId, defaultZone, currentZone, zones, activeConnectionSettings) {
            let { active_window } = this;

            // active_window should always be null. Either this is the first creation, or we should have already called
            // #closeWindowIfConnectionChanged.
            if (!active_window)
                active_window = new ChooseZoneWindow(
                    this,
                    connectionId,
                    defaultZone,
                    currentZone,
                    zones,
                    activeConnectionSettings
                );

            active_window.connect('zone-selected', this.#chooseClicked.bind(this));
            active_window.present();
        }

        #closeWindowIfConnectionChanged(connectionId) {
            let { active_window } = this;
            if (active_window?.connectionId !== connectionId)
                active_window?.close();
        }

        // eslint-disable-next-line no-unused-vars
        async #chooseClicked(emittingObject, connectionId, activeConnectionSettings, zone, defaultZone) {
            console.log(`For connection ID ${connectionId}, setting zone to ` +
                `${zone ?? ChooseZoneWindow.defaultZoneLabel}`);
            // Update the in-memory representation of seen connections before updating the zone. If the connection ID
            // hasn't been added to the list of seen connections when the zone is changed, the window will open again!
            // But don't sync to disk until after the zone for the connection is set. That way, if there's an error in
            // setting the zone, the connection ID won't be added to the file.

            // Update the in-memory representation of seen connections
            try {
                this.#connectionIdsSeen.addConnectionIdToSeen(connectionId);
            } catch (e) {
                console.error('Error adding connection to seen connections. Not attempting to set zone for the ' +
                    'connection.');
                console.error(e.message);
                this.#handleError(
                    false,
                    'main-connection-id-save',
                    _('Can\'t add connection to seen connections'),
                    _('There was a problem adding the connection to the list of seen connections. The firewall zone ' +
                        'will not be set for this connection. Please see logs for more information.')
                );
                return; // this is not fatal, but we will not continue with this attempt to set the zone
            }

            // Set the zone for the connection
            try {
                await ZoneForConnection.setZone(activeConnectionSettings, zone);
            } catch (e) {
                console.error('Error setting zone for connection.');
                console.error(e.message);
                this.#handleError(
                    false,
                    'main-set-zone',
                    _('Can\'t set firewall zone for connection'),
                    _('There was a problem setting the firewall zone for the connection. Please see logs for more ' +
                        'information.')
                );
                return; // this is not fatal, but we will not continue with this attempt to set the zone
            }

            // Save the the in-memory representation of seen connections to disk
            try {
                await this.#connectionIdsSeen.syncConnectionIdToSeen();
            } catch (e) {
                console.error('Error saving connection to seen connections.');
                console.error(e.message);
                this.#handleError(
                    false,
                    'main-connection-id-save-to-disk',
                    _('Can\'t save connection to seen connections'),
                    _('The zone has been set for the connection, but there was a problem saving the updated list of ' +
                        'seen connections to disk. Once you restart Bouncer, you will again be prompted to choose a ' +
                        `firewall zone for this connection. Please see logs for more information.`)
                );
                return; // this is not fatal, and the zone has been set, but we won't send a feel-good notification
            }

            // Everything worked. Generate a notification indicating what's happened.
            try {
                const notification = new Gio.Notification();
                notification.set_title(_('Firewall zone set for connection: ') + connectionId);
                if (zone === null) // this is the default zone
                    notification.set_body(_('Firewall zone for this connection has been set to the default zone ' +
                        '(currently ') + defaultZone + _('). Whenever you connect to this network in the future, the ' +
                        'firewall zone will automatically be changed to the default zone.')
                    );
                else
                    notification.set_body(_('Firewall zone for this connection has been set to ') + zone + _('. ' +
                        'Whenever you connect to this network in the future, the firewall zone will automatically ' +
                        'be changed to ') + zone + _('.')
                    );
                this.send_notification('main-zone-chosen', notification);
            } catch (e) {
                console.error('Error generating notification setting about the zone for connection.');
                console.error(e.message);
            }
        }

        // Don't make this private because it's an override
        quit(signal) {
            if (this.#quitting) {
                console.log('Skipping duplicate attempt to quit');
                return; // We are already quitting. Trying again will cause problems.
            }
            this.#quitting = true;
            if (signal === null)
                console.log('quitting with no signal!');
            else
                console.log(`quitting due to signal ${signal}!`);
            this.#sourceIds?.forEach((id) => GLib.Source.remove(id));
            this.networkState?.destroy();
            this.networkState = null;
            super.quit(); // this ends up calling vfunc_shutdown()
        }
    }
);

export function main(argv) {
    const application = new BouncerApplication();
    application.hold();
    return application.runAsync(argv);
}
